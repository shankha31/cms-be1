generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  userId      Int                   @id @default(autoincrement())
  firstName          String                @db.VarChar(50)
  lastName           String                @db.VarChar(50)
  email              String                @unique @db.VarChar(100)
  password           String                @db.VarChar(255)
  createdAt          DateTime?              @default(now())
  updatedAt          DateTime?             @updatedAt
  role               Role                   @default(user)
  enrollments        Enrollment[]
  submissions        Submission[]
  feedbacks          Feedback[]            @relation("FeedbackEvaluator")
  mentorshipsAsMentor MentorshipProgram[]  @relation("Mentor")
  mentorshipsAsMentee MentorshipProgram[]  @relation("Mentee")
}

model Event {
  eventId       Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  price         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  location      String?   @db.VarChar(255)
  meetingLink   String?   @db.VarChar(255)
  recordingLink  String?  @db.VarChar(255)
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  

  enrollments   Enrollment[]
  submissions   Submission[]
  schedules     Schedule[]
}


model Enrollment {
  enrollmentId    Int           @id @default(autoincrement())
  userId   Int
  eventId         Int
  registrationDate DateTime
  ticketType      TicketType
  paymentStatus   PaymentStatus @default(pending)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  user     User @relation(fields: [userId], references: [userId])
  event           Event       @relation(fields: [eventId], references: [eventId],onDelete: Cascade)
}

model Submission {
  submissionId    Int         @id @default(autoincrement())
  eventId         Int
  userId   Int
  title           String      @db.VarChar(255)
  abstract        String?
  submissionDate  DateTime   @default(now())
  status          SubmissionStatus @default(submitted)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  event           Event       @relation(fields: [eventId], references: [eventId],onDelete: Cascade)
  user     User @relation(fields: [userId], references: [userId])
  feedbacks       Feedback[]
}

model Feedback {
  feedbackId    Int         @id @default(autoincrement())
  submissionId  Int
  evaluatorId   Int
  comments      String?
  rating        Int          
  reviewDate    DateTime? @default(now())
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime? @updatedAt

  submission    Submission  @relation(fields: [submissionId], references: [submissionId],onDelete: Cascade)
  evaluator     User @relation("FeedbackEvaluator", fields: [evaluatorId], references: [userId])
}

model Schedule {
  scheduleId    Int         @id @default(autoincrement())
  eventId       Int
  time          DateTime
  location      String?     @db.VarChar(255)
  speakerName String @db.VarChar(255)
  speakerDesc String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  event         Event       @relation(fields: [eventId], references: [eventId],onDelete: Cascade)
}

model MentorshipProgram {
  mentorshipId Int            @id @default(autoincrement())
  mentorId     Int
  menteeId     Int
  startDate    DateTime
  endDate      DateTime?
  status       MentorshipStatus @default(active)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  mentor       User @relation("Mentor", fields: [mentorId], references: [userId])
  mentee       User @relation("Mentee", fields: [menteeId], references: [userId])
}
model messages {
  id                              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  from_user                       BigInt    @db.UnsignedBigInt
  to_user                         BigInt    @db.UnsignedBigInt
  content                         String    @db.Text
  created_at                      DateTime? @db.Timestamp(0)
  updated_at                      DateTime? @db.Timestamp(0)
  
}

enum Role {
  user
  admin
  mentor
}

enum TicketType {
  regular
  student
  vip
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum SubmissionStatus {
  submitted
  under_review
  accepted
  rejected
}

enum MentorshipStatus {
  active
  completed
  cancelled
}
